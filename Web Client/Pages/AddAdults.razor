@page "/addAdults"
@using Model
@using Data
@using Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IAdultService AdultServices
@inject NavigationManager NavigationManager

<h3>Add Adult</h3>


<EditForm Model="@newAdult" OnValidSubmit="@AddNewAdult">
    <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">First Name: <br/>
        <InputText @bind-Value="newAdult.FirstName"></InputText>
        </div>
        <div class="form-group">Last Name: <br/>
        <InputText @bind-Value="newAdult.LastName"></InputText>
        </div>
        <div class="form-group">Hair Color: <br/>
        <InputText @bind-Value="newAdult.HairColor"></InputText>
        </div>
        <div class="form-group">Eye Color: <br/>
        <InputText @bind-Value="newAdult.EyeColor"></InputText>
        </div>
        <div class="form-group">Weight: <br/>
        <InputNumber @bind-Value="newAdult.Weight"></InputNumber>
        </div>
        <div class="form-group">Height: <br/>
        <InputNumber @bind-Value="newAdult.Height"></InputNumber>
        </div>
        <div class="form-group">Age: <br/>
        <InputNumber @bind-Value="newAdult.Age"></InputNumber>
        </div>
        <div class="form-group">Sex: <br/>
        <InputText @bind-Value="newAdult.Sex"></InputText>
        </div>
        <div class="form-group">Job Title: <br/>
        <InputText @bind-Value="newAdult.JobTitle.JobTitle"></InputText>
        </div>
        <div class="form-group">Salary: <br/>
        <InputNumber @bind-Value="newAdult.JobTitle.Salary"></InputNumber>
        </div>
        <p class="actions">
            <button class="btn btn-outline-dark" type="submit">Create</button>
        </p>
</EditForm>




@code{

 private Adult newAdult = new();
 private Job job = new();
 IList<Adult> adults;
  protected override async Task OnInitializedAsync()
    {
        newAdult.JobTitle = job;
        adults = await AdultServices.GetAdultsAsync();
    }
    private async Task AddNewAdult(){
        newAdult.Id = (adults.Last().Id+1);
        await AdultServices.AddAdultAsync(newAdult);
        NavigationManager.NavigateTo("/adults");
    }
}